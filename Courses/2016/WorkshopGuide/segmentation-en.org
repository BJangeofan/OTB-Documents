** Image segmentation and export to GIS                              :slides:
*** Goals and data
**** Goals
     - Know steps to perform image segmentation with OTB
     - Know how to optimize segmentation parameters
     - Export segmentation results to a GIS

**** Data
     Dataset for this exercise can be found in folder: ~Data/segmentation~.

*** Planning
    Planning of the pratical work:
    1. Image smoothing with the MeanShift algorithm
    2. Segmentation
    3. Handle small regions
    4. Vectorization
    5. Filter segments in QGIS

*** MeanShift algorithm (1/4)
    #+ATTR_LATEX: :float t :width 0.4\textwidth
    [[file:Images/principe_mean_shift_1.pdf]]
    #+BEGIN_CENTER
    Search in pixel neighboorhood /nearby/ spectrally
    #+END_CENTER

*** MeanShift algorithm (2/4)
    #+ATTR_LATEX: :float t :width 0.4\textwidth
    [[file:Images/principe_mean_shift_2.pdf]]
    #+BEGIN_CENTER
    Spatial and spectral mean for pixels in the given window
    #+END_CENTER

*** MeanShift algorithm (3/4)
    #+ATTR_LATEX: :float t :width 0.4\textwidth
    [[file:Images/principe_mean_shift_3.pdf]]
    #+BEGIN_CENTER
    Move pixel to the barycentre and set value with spectral mean
    #+END_CENTER

*** MeanShift algorithm (4/4)
    #+ATTR_LATEX: :float t :width 0.4\textwidth
    [[file:Images/principe_mean_shift_4.pdf]]
    #+BEGIN_CENTER
    Go back to step 1 (iterative process). Stop afte convergence
    #+END_CENTER


** Image segmentation and export to GIS                               :guide:
*** Description                                                        :desc:
**** Summary
     
     This exercise allow to get familiar with large scale segmentation using the
     MeanShift algorithm. It goes through each step of the procedure and shows
     how to export and use output segments in a GIS.

**** Pre-requisites
     
     - Install software (Monteverdi and QGIS)
     - Output data from the VHR image pre-processing exercise
     - Know how OTB applications works (see corresponding exercise)
       
**** Goals

     - Know steps required to perform a segmentation
     - Know how to optimiez segmentation parameters
     - Know how to export results to a GIS

*** Steps                                                             :steps:
    Data needed for this exercise can be found in folder ~Data/segmentation~.
**** Image smoothing with MeanShift algorithm

     MeanShift algorithm performs a smoothing of the image by preserving
     edges. It gives more homogenous images and keep also clear frontiers
     between regions. It aims at facilite the segmentation step done by simple
     methods like connected component computation. The algorithm perform
     iterative mean over pixel using a given neighboordhood (spatial and spectral).

     Compute smoothing of image ~phr_orthopxs_osr_mipy_xt.tif~ using the
     application *MeanShiftSmoothing*. Change values /ranger/ and /spatialr/ parameters
     to see their influences.

     Notes:
     - /modesearch/ option allow to speedup computation but it is less
       stable. We will disable it in this exercise.
     - Spatial (/spatialr/) and spectral (/ranger/) radiuses are the most
       important parameters of the algorithm. The first one corresponds to a
       numbe of pixels and the other one corresponds to a distance between
       pixels spectral values.
     - /foutpos/ output the spectral mean result for each pixels and will be
       used in the next questions.
     - You can use /extended filename/ parameters /box/ to find the optimal
       parameters /ranger/ and /spatialr/ without processing all the input
       image.

       In the next step of the exercise we will use /ranger/ around 254 and
       /spatialr/ around 3 (to limit computation time)

**** Segmentation

     Cette étape va produire une segmentation initiale à partir des
     images écrites précédemment (sorties /fout/ et /foutpos/). Les
     pixels adjacents dont les valeurs dans l'image /fout/ sont
     distantes de moins de /ranger/ et dont les positions estimées
     dans l'image /foutpos/ sont distantes de moins de /spatialr/
     seront groupés au sein de la même composante connexe.

     Le calcul est fait par tuile, dont on peut fixer la taille au
     moyen des paramètres /tilesizex/ et /tilesizey/.

     Enfin, le paramètre /minsize/ permet d'éliminer toutes les
     régions dont la taille produite est trop petite (seuil exprimé en
     nombre de pixels).

     Utilisez l'application *LSMSSegmentation* pour réaliser cette
     étape. A noter:
     - Utilisez un /minsize/ de 0 dans cette première étape,
     - L'image de sortie sera une image étiquettée, dans laquelle chaque pixel
       porte un label entier unique correspondant au segment auquel il
       appartient. Il est recommandé d'encoder cette sortie en /uint32/ afin de
       disposer de suffisamment de labels uniques. En effet la segmentation
       génère potentiellement un grand nombre de segments.
     - Les valeurs pour les paramètres /ranger/ et /spatialr/ doivent
       être inférieures aux valeurs utilisées pour le lissage (étape
       précédente). Des valeurs d'environ la moitié de celles utilisées
       lors de l'étape précédente sont un bon point de départ.

     Utilisez la méthode /optimal/ de l'application *ColorMapping*
     afin de créer une carte contrastée des régions segmentées, qui
     sera plus facile à analyser.

**** Traitement des petites régions

     Une fois la segmentation initiale réalisée, il reste en général
     beaucoup de régions de petite taille, qui ne correspondent à
     aucun objet d'intérêt. L'application *LSMSSegmentation* permet de
     les filtrer (paramètre /minsize/), mais il est également possible
     de réaliser un post-traitement pour fusionner itérativement les
     régions de taille trop faible avec les régions adjacentes dont la
     radiométrie est la plus proche. C'est l'objet de l'application
     *LSMSSmallRegionsMerging*.

     Utilisez cette application pour retraiter la segmentation
     initiale, en fusionnant toutes les régions dont la taille est
     inférieure à 50 pixels.

     Utilisez à nouveau la méthode /optimal/ de l'application
     *ColorMapping* afin de créer une carte contrastée des régions
     segmentées, et comparer avec la carte de segmentation précédente.
     
**** Vectorisation
     
     La dernière étape consiste à exporter les polygones ainsi créés
     vers un fichier vectoriel. L'application *LSMSVectorization*
     permet d'effectuer cette étape, en calculant au passage la
     moyenne et la variance de chaque polygone en fonction d'une image
     support.

     Commencez par calculer une image de NDVI à l'aide de l'image
     initiale (l'ordre des bandes est Rouge, Vert, Bleu, Proche
     Infra-Rouge).

     Utilisez ensuite l'application *ConcatenateImages* pour former
     une image contenant les radiométries initiales ainsi que la bande
     de NDVI. Prenez garde à l'encodage du fichier de sortie.

     Utilisez l'application *LSMSVectorization* en utilisant l'image
     ainsi créée et l'image de segmentation en entrée. Choisissez un
     format /ESRI Shapefile/ (extension shp) pour le fichier de sortie.

     Ouvrez l'image initiale ainsi que le fichier vecteur ainsi créé
     dans QGIS. Changez le style d'affichage de la couche vecteur pour
     afficher la bordure des polygones en rouge et le corp
     transparent. Analysez plus finement la segmentation ainsi
     affichée.

     Ouvrez la table des attributs de la données vectorielle. Que
     constatez vous ?
     
**** Filtrage des polygones dans QGIS
     
     Utilisez l'outil de sélection par une expression de la table des
     attributs dans QGIS pour sélectionner les segments qui ne sont
     pas des ombres, et copiez les dans une nouvelle couche vecteur.

     Utilisez la calculatrice de champs de la table des attributs pour
     créer un nouvel attribut représentant la compacité:
     
     \begin{center}
     $compactness = \frac{\sqrt{area}}{perimeter}$
     \end{center}

     Utilisez l'outil de sélection par une expression de la table des
     attributs dans QGIS pour sélectionner les petits objets compacts
     dont la valeur moyenne du NDVI est forte (arbres ?). Copiez les
     dans une nouvelle couche.     

** Image segmentation and export to GIS                               :solutions:
*** Lissage de l'image par l'algorithme MeanShift

    L'étape de lissage se réalise de la manière suivante:

    #+BEGIN_EXAMPLE
    $ otbcli_MeanShiftSmoothing -in phr_orthopxs_osr_mipy_xt.tif 
      -fout meanshift.tif 
      -foutpos meanshift_pos.tif 
      -ranger 25 
      -spatialr 3 
      -maxiter 10 -modesearch 0 
    #+END_EXAMPLE

    Le paramètre /spatialr/ correspond au rayon spatial du lissage. Une
    valeur plus élevée provoquera un lissage plus fort, mais
    également un temps de calcul supérieur.

    Le paramètre /ranger/ correspond au rayon spectral du
    lissage, c'est à dire dans quelle mesure les pixels à l'intérieur
    du rayon spatial et de radiométrie similaire seront moyennés. Une
    valeur plus élevée augmentera l'effet de lissage.

    L'image /foutpos/ n'a pas de sens visuellement, et sera utilisée
    pour la suite de l'exercice.

*** Segmentation

    L'étape de segmentation se réalise de la manière suivante:

    #+BEGIN_EXAMPLE
    $ otbcli_LSMSSegmentation -in meanshift.tif 
                              -inpos meanshift_pos.tif 
                              -out init_seg.tif uint32
                              -ranger 10  
                              -spatialr 2
    #+END_EXAMPLE

    L'image de segmentation ainsi créée est difficilement
    interprétable. On peut la coloriser de la manière
    suivante:

    #+BEGIN_EXAMPLE
    $ otbcli_ColorMapping -in init_seg.tif 
                          -method optimal 
                          -out init_seg_cm.tif uint8
    #+END_EXAMPLE
    
    Cet algorithme de colorisation analyse les segments adjacents
    pour maximiser leurs contraste lors de la colorisation.

    L'image segmentée colorisée peut être analysée, et l'on constate
    qu'il y a une grande quantité de petites régions qui ne
    correspondent à aucun objet précis de la scène. A noter que ces
    petites régions peuvent soit être filtrée en utilisant le
    paramètre /minsize/ de l'application *LSMSSegmentation*, soit
    être traité dans l'étape suivante.

*** Traitement des petites régions

    Le traitement des petites régions s'effectue comme suit:

    #+BEGIN_EXAMPLE
    $ otbcli_LSMSSmallRegionsMerging -in meanshift.tif 
                                     -inseg init_seg.tif 
                                     -out final_seg.tif uint32 
                                     -minsize 100
    #+END_EXAMPLE

    On peut ensuite coloriser à nouveau le résultat de la manière
    suivante:
    
    #+BEGIN_EXAMPLE
    $ otbcli_ColorMapping -in final_seg.tif 
                          -method optimal 
                          -out final_seg_cm.tif uint8
    #+END_EXAMPLE
    
    En comparant les deux segmentations, on peut constater que les
    régions de taille inférieur au paramètre spécifié ont été
    fusionnée avec les régions voisines les plus pertinentes.

*** Vectorisation
    
    Pour commencer, on calcule l'indice NDVI pour l'image initiale:

    #+BEGIN_EXAMPLE
    $ otbcli_RadiometricIndices -in phr_orthopxs_osr_mipy_xt.tif 
                                -out phr_ndvi.tif 
                                -list Vegetation:NDVI 
                                -channels.blue 3 
                                -channels.red 1 
                                -channels.green 2 
                                -channels.nir 4 
    #+END_EXAMPLE
    
    Ensuite, on peut concaténer l'image initiale avec l'image de
    NDVI:

    #+BEGIN_EXAMPLE
    $ otbcli_ConcatenateImages -il phr_orthopxs_osr_mipy_xt.tif phr_ndvi.tif 
                               -out phr_radio_ndvi.tif 
    #+END_EXAMPLE

    Enfin, on réaliser la vectorisation:

    #+BEGIN_EXAMPLE
    $ otbcli_LSMSVectorization -in phr_radio_ndvi.tif 
                               -inseg final_seg.tif -out segmentation.shp
    #+END_EXAMPLE
    
    En ouvrant la table des attributs dans QGIS, on constate qu'on
    peut accéder pour chaque polygone à la moyenne et à la variance
    de chaque bande de l'image (incluant le NDVI).

*** Filtrage polygones dans QGIS
    
    Pour sélectionner tout les segments qui ne sont pas des ombres à
    l'aide de l'outil de sélection par expression, on peut utiliser
    l'expression suivante:

    #+BEGIN_EXAMPLE
    meanB0 > 140 or meanB1 > 140 or meanB2 > 140 or meanB3 > 140
    #+END_EXAMPLE

    Ensuite, en utilisant la calculatrice de champ, on peut créer un
    nouveau champ (virtuel) en réel, appelé /compac/ en utilisant la
    formule suivante:

    #+BEGIN_EXAMPLE
    sqrt(area($geometry)/perimeter($geometry)
    #+END_EXAMPLE

    Enfin, pour sélectionner les petits objets compacts dont la
    valeur moyenne de NDVI est forte, on peut utiliser l'expression
    suivante dans l'outil de sélection par expression:

    #+BEGIN_EXAMPLE
    compac > 0.1 and nbPixels < 500 and meanB4 > 0.2
    #+END_EXAMPLE
