** Réaliser une classification supervisée                            :slides:
*** Objectifs et Données
**** Objectifs
     TODO:
**** Données
     TODO:
*** Déroulement

*** Présentation des données
    TODO:

*** Classification supervisée
    TODO:

** Réaliser une classification supervisée                           :guide:
*** Description                                                        :desc:
**** Résumé

**** Pré-requis

     
**** Objectifs

*** Étapes                                                            :steps:

**** Introduction aux données LANDSAT 8

    Dans l'archive de données, le dossier (TODO: ajouter chemin) contient neuf
    images Landsat 8 aux dates suivantes:
    
     |------------|
     | 2014-03-09 |
     | 2014-04-01 |
     | 2014-04-17 |
     | 2014-05-28 |
     | 2014-06-20 |
     | 2014-07-31 |
     | 2014-09-01 |
     | 2014-10-03 |
     | 2014-10-26 |
     |------------|

    Ces images sont chacune multispectrales avec les septs bandes du capteur OLI:

    |---+---------------------|
    | 0 | Coastal aerosol     |
    | 1 | Blue                |
    | 2 | Green               |
    | 3 | Red                 |
    | 4 | Near Infrared (NIR) |
    | 5 | SWIR 1              |
    | 6 | SWIR 2              |
    |---+---------------------|

    Au total, c'est donc 63 bandes qui representent chaque pixel.
    Les images sont encodés sur 16 bits.

    Ouvrez une image dans monteverdi et régler les bandes pour un affichage en
    vrais couleurs (rouge, vert, bleu).

    Ouvrez les neuf images et remarquez les changements.

    Les fichiers (TODO LS8/training/training.shp) et (TODO
    LS8/testing/testing.shp) contiennent des polygones qui définissent 11
    classes sur l'ensemble de la scène:

    |------+-----------------------------|
    | Code | Nom                         |
    |------+-----------------------------|
    |   11 | Éte                         |
    |   12 | Hiver                       |
    |   31 | Foret feuilles caduques     |
    |   32 | Foret feuilles persistantes |
    |   34 | Pelouses                    |
    |   36 | Lande ligneuse              |
    |   41 | Bati                        |
    |   51 | Eau                         |
    |  211 | Prairie                     |
    |  221 | Verger                      |
    |  222 | Vigne                       |
    |------+-----------------------------|

    Ouvrez un des fichiers de polygones dans QGIS. La table d'attributs est
    accessible depuis clic-droit sur la couche -> ouvrir la table des attributs.
    Chaque label est visible et la liste est filtrable par expression SQL.

    Les polygones sont répartis en deux ensembles: apprentissage (training) et
    validation (testing).

**** Classification d'une date

    Typiquement les étapes d'une procedure de classifiation sont:

       1. Calcul des statistiques
       2. Apprentissage du modèle
       3. Utilisation du modèle (classification)
       4. Validation
       5. Visualisation

    Dans la suite du TP, vous réalisez d'autres classifications sur d'autres
    images. Un conseil est donc de travailler dans un répertoire par sous
    partie, par exemple "classif1".

    Creez un répertoire classif1.

***** Calcul des statistiques

    Les variables doivent êtres comparables entre chaque image. La première
    étape est le calcul de statistiques pour que les données puissent être
    normalisés: moyenne nulle et écart-type de 1.
    
    Choisissez une image à classifier, puis, dans le répertoire classif1
    utilisez l'application ComputeImageStatistics pour produire le fichier de
    statistiques:

    otbcli_ComputeImagesStatistics -il image.tif
                                   -out images_statistics.xml 

***** Apprentissage du modèle

    L'application TrainImageClassifier permet d'apprendre un modèle pour
    différentes méthodes de classifications. Regardez la documentation de cette
    application et créez un modèle pour la méthode "libsvm". Les paramètres
    à régler sont:

    - io.il # l'image d'entrée
    - io.vd # le fichier vectoriel d'apprentissage (training.shp)
    - io.imstat # le fichier xml de statistique calculé précédement
    - classifier # la méthode, ici utilisez "libsvm"
    - io.out # le nom du fichier modèle en sortie, par exemple "model.rf"

    D'autres paramètres sont important aussi:
    - sample.vfn CODE # indique que la colonne SQL des labels porte le nom CODE
    - sample.vtr 0 # Ratio de l'emsemble d'apprentissage sur l'ensemble de
      validation. Zero ici car nous utilisons notre propre découpe.

    La commande à utiliser est donc de ce type:

        otbcli_TrainImagesClassifier -io.il \
        ../../Data/LS8/LANDSAT_MultiTempIm_clip_GapF_20141026.tif \
        -io.vd ../../Data/LS8/training/training.shp \
        -sample.vfn CODE \
        -sample.vtr 0 \
        -classifier libsvm \
        -io.imstat images_statistics.xml \
        -io.out model.svm

***** Utilisation du modèle

   Une fois le modèle de classification appris, il peut être utilisé pour
   classifier tout les pixels de l'image.

   Utilisez l'application ImageClassifier, en specifiant le modèle créé dans
   l'étape précédente.

***** Visualisation

   La sortie de l'étape précédente est une image .tif qui associe à chaque pixel
   une classe. Pour visualiser cette image, l'application ColorMapping permet
   d'associer à chaque label une couleur RGB et de générer une image de
   visualisation.

   Utilisez l'application ColorMapping avec la table de couleur fournie
   (color_map.txt):

    otbcli_ColorMapping -in                labeled_image.tif
                        -method            custom
                        -method.custom.lut color_map.txt
                        -out               RGB_color_image.tif
***** Validation

  Les labels utilisés lors de l'étape d'apprentissage ne représentent que 30%
  des polygones. les 70% restant sont dans le fichier testing/testing.shp et
  servent à evaluer les performances du modèle appris en calculant la matrice de
  confusion.

  Utilisez l'application ComputeConfusionMatrix avec le jeu de donnée de test
  pour produire la matrice de confusion du modèle appris:

    otbcli_ComputeConfusionMatrix \
    -in labeled_image.tif \
    -ref vector \
    -ref.vector.in ../../Data/LS8/testing/testing.shp \
    -ref.vector.field CODE \
    -out confusion_matrix.csv

  Le paramètre ref.vector.field CODE est nécéssaire. Il indique le nom du
  champ contenant le numero de label.

  Consultez la matrice de confusion et identifiez les classes bien différenciés.

  A quel classe appartiennent le plus souvent les pixels mal classifiés ?
  Pourquoi ?

  Vous pouvez utiliser le squelette csv (template_confusion_matrix.csv)  pour
  identifier les labels facilement.

**** Classification multidate

  Le principe de la classification multidate est d'utiliser pour chaque pixel,
  toute les dates disponibles comme des bandes spectrales supplémentaire. Avec
  les données LANDSAT 8, il s'agit donc d'utiliser 63 bandes par pixel.
  Les dates ont été choisies de façon à être réparties temporellement sur une
  année. Cela permet d'intégrer les variation saisonales qui apporte beaucoup
  d'information pour la discrimination de certaines classes.

  Avant tout, créez un repertoire "classif9" pour cette partie.

  Les étapes sont les mêmes que précédement, mais il faut d'abord constituer une
  image de 63 bandes en concatenant les 9 images.

  Pour cela, utilisez l'application ConcatenateImages.

  Vérifiez ensuite que la sortie est bien une image de taille 3667x3667 de
  63 bandes sur 16 bits avec gdalinfo.

  Puis effectuez les même étapes que précédement: ComputeImageStatistics,
  TrainImageClassifier, ImageClassifier, ColorMapping, ComputeConfusionMatrix.
  *Mais* utilisez plutot la méthod Random Forest pour le modèle.

  + parametres noyau et optimisation des paremetres du noyau

    on passe à random forest qui est plus rapide en tratements
    random forest plus rapide 

    optimisation des parametres du noyau
    Regler 

    comparer avec 1 date: matrice de confusion, image rgb

**** Profil NDVI

    commandes (ou livré ?)
    visualiser dans QGIS

**** Regularisation par vote majoritaire

    principe
    commande

**** Fusion de classes

    principe
    comment décider quelle classe fusionner
    commandes

**** Vectorisation

    principe
    commande

** Réaliser une classification supervisée                         :solutions:

