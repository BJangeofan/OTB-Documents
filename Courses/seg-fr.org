** Segmentation                                                        :seg:
*** Description
**** Résumé
Cet exercice présente la segmentation d'images à l'aide de
l'application *Segmentation*. Vous apprendrez à produire une
segmentation raster avec différents algorithmes. L'utilisation du
format de sortie vecteur est aussi présenté, car il permet le
traitement d'images de taille très grande.

**** Pré-requis
- Connaissances de base sur les *OTB Applications* et Quantum GIS.
- Notions en segmentation d'images.
- Notions de base en SIG et formats de données vecteur.

**** Objectifs
- Utilisation de l'application *Segmentation*.
- Segmentation d'images de grande taille et importation des résultats
  dans un SIG.

*** \'Etapes

**** Introduction à l'application *Segmentation*
1. Lancez les versions en ligne de commande et graphique de l'application
2. Lisez la documentation. Quelles sont les 3 méthodes de segmentation disponibles?
3. Quels sont les 2 modes (type de format) des données en sortie?

**** Segmentation simple en mode raster
Dans cette partie de l'exercice vous utiliserez l'image
~segmentation_small_xt_phr.tif~

1. Lancez la segmentation en mode /raster/ avec la méthode des
   composantes connexes et une condition de seuil sur la distance spectrale.
2. Visualisez le résultat de la segmentation dans *Monteverdi*. Que voyez-vous?
3. Utilisez l'application *ColorMapping* afin d'améliorer la
   visualisation :
   1. Essayez la méthode /optimal/.
   2. Essayez la méthode /image/.
4. Essayez différentes conditions pour les composantes connexes et
   analysez leur influence sur les résultats. Vous pouvez essayer de
   changer le seuil de distance ou regarder la documentation pour
   connaître d'autres mots-clés.

_Trucs et astuces :_
- Utilisez le mot-clé *distance* dans l'expression pour indiquer la
  distance spectrale.
- Faites attention au type d'image en sortie.

**** Autres algorithmes de segmentation
Dans cette partie de l'exercice, vous utiliserez l'image
~segmentation_small_xt_phr.tif~

1. Lancez la segmentation en mode /raster/ à nouveau, mais utilisez la
   méthode /Mean-Shift/. Utilisez *ColorMapping* pour visualiser les résultats.
   1. Commencez par utiliser les paramètres par défaut.
   2. Modifiez ensuite les paramètres et analysez les résultats. Les
      paramètres les plus déterminants sont les rayons spatial et
      spectral (range).
2. Lancez la segmentation en mode /raster/ avec la méthode de la
   ligne de partage des eaux (/Watershed/). Servez-vous
   de *ColorMapping* pour la visualisation.
   1. Commencez par utiliser les paramètres par défaut.
   2. Modifiez ensuite les paramètres et analysez les résultats.
3. Comparez les résultats des 3 algorithmes. Conservez la meilleure
   segmentation pour l'exercice suivant.

_Trucs et astuces :_
- Il existe 2 mises en oeuvre de la méthode /Mean-Shift/. Edison est
  la version originale des auteurs de l'algorithme.

**** Passage à l'échelle : mode vecteur
Dans cette partie de l'exercice, vous utiliserez l'image
~segmentation_large_xt_phr.tif~

1. Lancez la segmentation en mode /raster/ en utilisant les meilleurs
   paramètres de l'exercice précédant, mais sur la grande
   image. Regardez la mémoire et l'utilisation du
   processeur. Qu'est-ce qui se passe?
2. Lancez à nouveau la segmentation mais en mode /vecteur/ en
   désactivant l'option *stitching*. Comparez les ressources utilisées
   avec le point précédant.
3. Ouvrez l'image et le résultat de la segmentation dans Quantum
   GIS. Ajustez les paramètres de visualisation (voir _Trucs et
   astuces_ plus bas). Qu'observez-vous?
4. Lancez à nouveau la segmentation en mode /vecteur/ en activant
   l'option *stitching*. Sauvegardez les résultats dans un nouveau
   fichier et ouvrez-le dans le même projet Quantum GIS. Quel est
   l'effet de l'option *stitching*?

_Trucs et astuces :_
- Sous Linux ou Mac OS, les ressources peuvent être consultées avec la
  commande ~top~ dans un terminal. Sous Windows, on peut utiliser le
  gestionnaire de tâches.
- Appuyez sur ~Ctrl C~ pour arrêter l'application.
- Utilisez le format /sqlite/ pour sauvegarder les fichiers vecteur
  (extension ~.sqlite~).
- Quantum GIS peut importer des couches raster et vecteur.
- La visualisation de couches raster sous Quantum GIS peut être
  ajustée comme ceci :
  - click droit sur la couche, puis /Properties/
  - allez dans l'onglet /Style/
  - choisir /Use standard deviation/
  - dans /Contrast enhancement/, choisir /Stretch to MinMax/
- La visualisation de couches vecteur sous Quantum GIS peut être
  ajustée comme ceci :
  - click droit sur la couche, puis /Properties/
  - allez dans l'onglet /Style/, choisissez /Change/
  - dans /Symbol layer type/, choisissez /Outline: Simple line/
  - on peut aussi changer la couleur
- Dans Quantum GIS on peut sauvegarder le projet dans un fichier de
  façon à conserver tous ces paramètres.
        
**** Pour aller plus loin
1. En mode /vecteur/, étudiez les effets des paramètres /tilesize/,
   /simplify/ et /minsize/.
2. Comment segmenter toutes les régions de l'image sauf la végétation
   à l'aide de l'application *Segmentation* et éventuellement d'autres applications?
3. Avec les applications disponibles, comment gérer la segmentation de
   structures fortement réfléchissantes?
         
*** Solutions                                                     :solutions:

**** Introduction à l'application *Segmentation*

***** Point 1
Pour obtenir l'aide en ligne de commande, lancez
: $ otbcli_Segmentation

Pour la version graphique, lancez
: $ otbgui_Segmentation

***** Point 2
Il y a 3 méthodes de segmentation dans l'application :
- Mean-Shift (deux version différentes)
- Ligne de partage des eaux ou Watershed
- Composantes connexes

***** Point 3
Il y a 2 modes pour la génération de la segmentation :
- Le mode /raster/ qui est utile pour des images de petite taille et
  qui produit une image où chaque région de la segmentation est
  étiquetée avec un identifiant unique.
- Le mode /vecteur/ qui permet de segmenter des images de grande
  taille et qui produit un fichier vecteur où chaque région de la
  segmentation est représentée par un polygone.

**** Segmentation simple en mode raster

***** Point 1
Voici la ligne de commande avec un seuil de 30 sur la distance
spectrale :
: $ otbcli_Segmentation -in segmentation_small_xt_phr.tif
:   -filter cc -filter.cc.expr "distance < 30"
:   -mode raster -mode.raster.out first_cc.tif uint32

Notez que nous utilisons ~uint32~ pour le codage des valeurs de sortie
afin d'avoir assez d'étiquettes uniques pour toutes les régions.

***** Point 2
Le résultat de la segmentation est difficile à visualiser car les
segments adjacents sont souvent étiquetés de façon consécutive. On
peut noter le gradient d'intensité entre le haut et le bas de l'image,
ce qui correspond aux valeurs croissantes des étiquettes.

***** Point 3
La ligne de commande suivante utilise *ColorMapping* en mode /optimal/ :

: $ otbcli_ColorMapping -in first_cc.tif 
:   -out first_cc_color_optimal.png uint8
:   -method optimal

La table de couleurs /optimal/e associe une couleur à chaque région de
façon à maximiser le contraste avec les régions voisines. Nous
utilisons ~uint8~ pour le codage de sortie, car *ColorMapping* produit
des images en 8 bits qui peuvent être visualisées avec n'importe quel
outil de visualisation.

Avec cette table de couleurs, on observe que l'image est
sur-segmentée.

: $ otbcli_ColorMapping -in first_cc.tif 
:   -out first_cc_color_image.png uint8
:   -method image -method.image.in segmentation_small_xt_phr.tif

La table de couleurs /image/ associe à chaque segment la couleur
moyenne dans l'image originale. Ceci permet d'avoir une visualisation
plus réaliste. Étant donné que l'image est sur-segmentée,
l'application affichera beaucoup de messages dans le terminal.

Voici les résultats obtenus avec les 2 méthodes, /optimal/ à gauche et
/image/ à droite :

#+Latex:\vspace{0.5cm}
#+ATTR_LaTeX: :width 0.45\textwidth
[[file:Images/first_cc_color_optimal.png]] [[file:Images/first_cc_color_image.png]]

***** Point 4
Voici un autre exemple. La commande suivante regroupera les pixels qui
- ont une distance spectrale inférieure à 30
- ou qui ont simultanément une intensité supérieure à 400 et une distance
  spectrale inférieure à 50
- ou qui ont tous les deux une intensité supérieure à 1000
- ou qui ont tous les deux une valeur dans le PIR inférieure à 150.

: $ otbcli_Segmentation -in segmentation_small_xt_phr.tif
:   -filter cc -filter.cc.expr "distance<30
:    or (intensity_p1>400 and intensity_p2 > 400 and distance<50)
:    or(intensity_p1 >1000 and intensity_p2>1000
:    or (p1b3 <150 and p2b3<150))"
:   -mode raster -mode.raster.out second_cc.tif uint32

Voici le résultat obtenu :

#+Latex:\vspace{0.5cm}
#+ATTR_LaTeX: :width 0.45\textwidth
[[file:Images/second_cc_color_optimal.png]] [[file:Images/second_cc_color_image.png]]

**** Autres algorithmes de segmentation

***** Point 1
Voici la ligne de commande pour lancer la segmentation /Mean-Shift/
avec les paramètres par défaut :

: $ otbcli_Segmentation -in segmentation_small_xt_phr.tif
:   -filter meanshift -mode raster
:   -mode.raster.out meanshift.tif uint32

Un meilleur résultat est obtenu en utilisant un rayon spectral de 30 :

: $ otbcli_Segmentation -in segmentation_small_xt_phr.tif
:   -filter meanshift -filter.meanshift.ranger 30 -mode raster
:   -mode.raster.out meanshift.tif uint32

Voici le résultat :

      #+Latex:\vspace{0.5cm}
      #+ATTR_LaTeX: :width 0.45\textwidth
      [[file:Images/meanshift_color_optimal.png]] [[file:Images/meanshift_color_image.png]]
      #+Latex:\vspace{0.5cm}


Voici la ligne de commande pour l'algorithme du Watershed avec les
paramètres par défaut : 

      : $ otbcli_Segmentation -in segmentation_small_xt_phr.tif
      :   -filter watershed -mode raster
      :   -mode.raster.out watershed.tif uint32

Et enfin les résultats :

      #+Latex:\vspace{0.5cm}
      #+ATTR_LaTeX: :width 0.45\textwidth
      [[file:Images/watershed_color_optimal.png]] [[file:Images/watershed_color_image.png]]

**** Passage à l'échelle : mode vecteur

***** Point 1
La commande suivante lance la segmentation sur la grande image :

      : $ otbcli_Segmentation -in segmentation_large_xt_phr.tif
      :   -filter meanshift -filter.meanshift.ranger 30 -mode raster
      :   -mode.raster.out meanshift.tif uint32

Étant donné que l'image est de grande taille, (4096 par 4096 pixels),
il est probable que, en fonction de la machine :
- l'application termine en erreur par manque de mémoire
- l'application ne s'arrête pas, mais consomme toute la mémoire disponible.

***** Point 2
La commande suivante lance la segmentation en mode /vecteur/ sans
l'option stitch :

      : $ otbcli_Segmentation -in segmentation_large_xt_phr.tif
      :   -filter meanshift -filter.meanshift.ranger 30 -mode vector
      :   -mode.vector.out meanshift.sqlite -mode.vector.stitch 0

En mode vecteur, la consommation de mémoire est stable, car la
segmentation se fait en appliquant un tuilage sur l'image.

***** Point 3
Dans le SIG on observe l'effet du tuilage : les bords des tuiles sont
visibles sur le résultat de la segmentation. On peut aussi voir que la
segmentation produit un très grand nombre de polygones.

***** Point 4
La commande suivante lance l'application en mode /vecteur/ avec
l'option /stitch/ :

      : $ otbcli_Segmentation -in segmentation_large_xt_phr.tif
      :   -filter meanshift -filter.meanshift.ranger 30 -mode vector
      :   -mode.vector.out meanshift.sqlite -mode.vector.stitch 1

La visualisation des résultats dans Quantum GIS permet de voir que la
plupart des effets du tuilage ont disparu. Les résultats sont donc
proches de ce que nous obtiendrions sans tuilage.

Voici les résultats tels que visualisés dans le SIG. En bleu, les
résultats sans stitching et en rouge, avec.

      #+Latex:\vspace{0.5cm}
      #+Latex:\begin{center}
      #+ATTR_LaTeX: :width 0.9\textwidth
      [[file:Images/qgis_stitch.png]]
      #+Latex:\end{center}
      
**** Pour aller plus loin
***** Point 1
- L'option /tilesize/ permet de régler la taille des tuiles utilisées
  pour la segmentation.
- L'option /simplify/ permet de simplifier les polygones générés en
  utilisant une valeur de tolérance exprimée en pixels. Le fichier
  résultat sera de taille inférieure.
- L'option /minsize/ permet d'éliminer les segments de taille
  inférieure à un seuil (en pixels).

***** Point 2
Afin d'éviter de segmenter la végétation, on peut construire un masque
de végétation avec *BandMath* par seuillage du NDVI. Ce masque peut
être utilisé par la segmentation en utilisant l'option
/mode.vector.inmask/. Notez que cette option est seulement disponible
en mode /vecteur/.

***** Point 3
Les objets de forte réflectance sont souvent difficiles à segmenter. A
cause des réflexions spéculaires, leur variance est très forte. En
conséquence, les méthodes basées sur la comparaison de pixels voisins
ne marchent pas correctement. Les 3 méthodes présentées ici utilisent
cette approche.

Une façon de contourner le problème est d'associer ensemble tous les
pixels voisins de forte réflectance, ce qui peut s'obtenir avec la
segmentation par composantes connexes comme cela a été montré plus haut.


