** Segmentation                                                        :seg:
*** Description
**** Abstract

     This exercise will get you familiar with the OTB *Segmentation*
     application. You will learn how to produce a raster segmentation
     output with different algorithms and how to scale up to larger input
     images by producing vector outputs.

**** Data
  
  If you need to generate the data used in this exercise from the
  original products (Ortho PMS), you can use the following command lines.
   
  #+LATEX:\begin{tiny}
  #+BEGIN_SRC bash
  $ otbcli_ExtractROI \
   -in IMG_PHR1A_PMS-N_201202250025599_ORT_PRG_FC_5855-001_R1C1.JP2 \
   -out segmentation_small_xt_phr.tif uint16 -startx 11848 -starty 11426 -sizex 1024 -sizey 1024

  $ otbcli_ExtractROI \
   -in IMG_PHR1A_PMS-N_201202250025599_ORT_PRG_FC_5855-001_R1C1.JP2 \
   -out segmentation_large_xt_phr.tif uint16 -startx 10240 -starty 10240 -sizex 4096 -sizey 4096
  
  #+END_SRC
  #+LATEX:\end{tiny}

**** Pre-requisites

     - Basic knowledge on *OTB applications* and *QGIS* usage
     - Basic knowledge on image segmentation
     - Basic knowledge on GIS vector file formats

**** Achievements

     - Usage of the OTB *Segmentation* application,
     - Segmentation of large raster and import the results in a GIS software.

*** Steps

**** Getting familiar with the *Segmentation* application

     1. Run the command-line and graphical version of the application
     2. Read the documentation. What are the three segmentation
        methods available ?
     3. What are the two output modes ?

**** Simple segmentation in raster mode

     In this part of the exercise, you will use the following data:
     ~segmentation_small_xt_phr.tif~

     1. Run the *Segmentation* application in /raster/ mode, using the
        connected components filter and a thresholding condition on
        the spectral distance
     2. View the resulting segmentation in *Monteverdi*. What do you see
        ?
     3. Use the *ColorMapping* application to enhance the rendering of
        the result:
        1. Try the /optimal/ method
        2. Try the /image/ method
     4. Try different connected components conditions and see how they
        influence the results. You can try to change the distance
        threshold for instance, or look into the documentation for
        other keywords.

     _Tips and Recommandations:_
      - Use the *distance* keyword in the expression to denote
        spectral distance
      - Pay attention to the output image type

**** More segmentation algorithms

     In this part of the exercise, you will use the following data:

     ~segmentation_small_xt_phr.tif~

     1. Run the *Segmentation* application in /raster/ mode again, but
        this time use the Mean-Shift filter. Use the *ColorMapping*
        application to visualize the results.
        1. Try the default parameters first
        2. Try to change the parameters and see how it influences the
           results. The most important parameters are the spatial and
           the range radius.
     2. Run the *Segmentation* application in /raster/ mode again, but
        this time use the Watershed filter. Use the *ColorMapping*
        application to visualize the results.
        1. Try the default parameters first
        2. Try to change the parameters and see how it influences the
           results.
     3. Compare the best results from the three algorithms. Keep the
        best segmentation result you had for Exercise 3.

     _Tips and Recommendations:_
      - There are two implementations of the Mean-Shift filter. Edison
        is the original implementation from the Mean-Shift paper
        authors.

**** Going big: the vector mode

     In this part of the exercise, you will use the following data:

     ~segmentation_large_xt_phr.tif~

     1. Run the *Segmentation* application in /raster/ mode again,
        using the best parameters you had in previous section, on the
        large image. Look at computer resources. What happens ?
     2. Run the *Segmentation* application again, this time in
        /vector/ mode, and *disable the stitching option*. Look at
        computer resources. What happens ?
     3. Open the result of the input image and the segmentation file
        in *QGis*. Tune *QGis* to allow for proper visualization (see
        _Tips and Recommendation_). What do you see ?
     4. Run the *Segmentation* application again, this time in
        /vector/ mode, and *enable the stitching mode*. Write the
        results to a different file and load it into the *QGis*
        project as well. What is the effect of the *stitch* option ?

     _Tips and Recommendations:_
      - Computer resources can be monitored by running ~top~ in
        another terminal
      - Hit ~Ctrl C~ to interrupt the processing
      - Use the /sqlite/ file format to store vector outputs (~.sqlite~
        file extension)
      - In *QGis*, one can import both raster and vector layers
      - In *QGis*, one can tune raster layers rendering the following
        way:
        - Right-click on the layer, select /Properties/
        - Go to the /style/ tab
        - Select /Use standard deviation/
        - In /Contrast enhancement/, select /Stretch to MinMax/
      - In *QGis*, one can tune vector layers rendering the following
        way:
        - Right-click on the layer, select /Properties/
        - In the /style/ tab, select /Change/
        - As /Symbol layer type/, select /Outline: Simple line/
        - You might change the color as well
      - In *QGis*, you can save your project to a file and avoid having
        to reset those parameters

**** Homework
      1. In /vector/ mode, study the effect of the
         /tilesize/, /simplify/ and /minsize/ option.
      2. Using the *Segmentation* application (and maybe other OTB
         applications), how can we segment everything but vegetation ?
      3. Using the *Segmentation* application (and maybe other OTB
         applications), how can we deal with segmentation of high
         reflectance structures ?
      4. Perform the same operation as in the "Vector mode" section using the
         LSMS framework (Large Scale Mean-Shift segmentation) which allows to perform
         exact segmentation at large scale without having to deal with tile effects.

*** Solutions                                                     :solutions:

**** Getting familiar with the *Segmentation* application

***** Item 1

     To get the command-line help, run

     : $ otbcli_Segmentation

     To Get the graphical version of the *Segmentation* application, run

     : $ otbgui_Segmentation

***** Item 2

      There are three segmentation methods available in the application:
      - Mean-Shift (two different implementations)
      - Watershed (ITK implementation)
      - Connected-Components

***** Item 3

      There are two outputs available in the application:
      - The raster mode allows to segment a small image and produces a
        raster where each component of the segmentation is labeled with
        a unique integer,
      - The vector mode allows to segment larger images and produces a
        vector file where each segment of the segmentation is
        represented by a polygon.

**** Simple segmentation in raster mode

***** Item 1

      Here is the command-line to run, using a threshold of 30 on the
      spectral distance:

      : $ otbcli_Segmentation -in segmentation_small_xt_phr.tif
      :   -filter cc -filter.cc.expr "distance < 30"
      :   -mode raster -mode.raster.out first_cc.tif uint32

      Please note that we use ~uint32~ as the output type so as to be
      sure to have enough unique labels for the whole segmentation.

***** Item 2

      The segmentation result is difficult to visualize because
      neighboring segments are likely to be labeled with very close
      labels. One can notice the brightness gradient from top to bottom
      corresponding to globally increasing labels.

***** Item 3

      The following command-line allow to use the *ColorMapping*
      application in optimal mode:

      : $ otbcli_ColorMapping -in first_cc.tif 
      :   -out first_cc_color_optimal.png uint8
      :   -method optimal

      The /optimal/ color-mapping method allows to colorize each
      segment with a color maximizing contrast with the color of its
      neighbors. Please note that we use ~uint8~ as the output type
      because the *ColorMapping* application produces 8-bits data that
      can be directly viewed by any image viewer.

      Looking at the colorized image with the /optimal/ look-up table,
      we can now see that the result is over-segmented.

      : $ otbcli_ColorMapping -in first_cc.tif 
      :   -out first_cc_color_image.png uint8
      :   -method image -method.image.in segmentation_small_xt_phr.tif

      The /image/ color-mapping method allows to colorize each segment
      with its mean color in the original image, which gives a more
      realistic rendering. Note that since the results are
      over-segmented, the application will output a huge amount of text
      to the terminal.

      Here are the results of the /optimal/ (left) and /image/ (right) methods:

      #+Latex:\vspace{0.5cm}
      #+ATTR_LaTeX: :width 0.45\textwidth
      [[file:Images/first_cc_color_optimal.png]] [[file:Images/first_cc_color_image.png]]
      
      

***** Item 4

      Here is another example: the following command-line will segment
      together pixels that either:
      - Have a spectral distance lower than 30,
      - Have both an intensity value greater than 400 and a spectral distance lower than 50,
      - Have both an intensity value greater than 1000,
      - Have both a near infra-red value lower than 150.

      : $ otbcli_Segmentation -in segmentation_small_xt_phr.tif
      :   -filter cc -filter.cc.expr "distance<30
      :    or (intensity_p1>400 and intensity_p2 > 400 and distance<50)
      :    or(intensity_p1 >1000 and intensity_p2>1000
      :    or (p1b3 <150 and p2b3<150))"
      :   -mode raster -mode.raster.out second_cc.tif uint32

      Here are the color-mapping results:

      #+Latex:\vspace{0.5cm}
      #+ATTR_LaTeX: :width 0.45\textwidth
      [[file:Images/second_cc_color_optimal.png]] [[file:Images/second_cc_color_image.png]]

**** More segmentation algorithms

***** Item 1

      Here is the command-line to run the application using the
      Mean-Shift filter, with default parameters:

      : $ otbcli_Segmentation -in segmentation_small_xt_phr.tif
      :   -filter meanshift -mode raster
      :   -mode.raster.out meanshift.tif uint32

      A better result is obtained by using a spectral radius of 30:

      : $ otbcli_Segmentation -in segmentation_small_xt_phr.tif
      :   -filter meanshift -filter.meanshift.ranger 30 -mode raster
      :   -mode.raster.out meanshift.tif uint32

      Here are the results of this command:

      #+Latex:\vspace{0.5cm}
      #+ATTR_LaTeX: :width 0.45\textwidth
      [[file:Images/meanshift_color_optimal.png]] [[file:Images/meanshift_color_image.png]]
      #+Latex:\vspace{0.5cm}


      Here is the command-line to run the application using the
      Watershed filter, with default parameters:

      : $ otbcli_Segmentation -in segmentation_small_xt_phr.tif
      :   -filter watershed -mode raster
      :   -mode.raster.out watershed.tif uint32

      Here are the results of this command:

      #+Latex:\vspace{0.5cm}
      #+ATTR_LaTeX: :width 0.45\textwidth
      [[file:Images/watershed_color_optimal.png]] [[file:Images/watershed_color_image.png]]

**** Going big: the vector mode

***** Item 1

      The following command will run the application on the larger
      image:

      : $ otbcli_Segmentation -in segmentation_large_xt_phr.tif
      :   -filter meanshift -filter.meanshift.ranger 30 -mode raster
      :   -mode.raster.out meanshift.tif uint32

      Since the input image is quite large (4096 by 4096 pixels), it is
      likely that, depending on the available memory on the computer:
      - The application fails with a memory allocation error,
      - The application does not fails but starts to eat all the
        available memory.

***** Item 2

      The following command will run the application in /vector/ mode,
      without the /stitch/ option:

      : $ otbcli_Segmentation -in segmentation_large_xt_phr.tif
      :   -filter meanshift -filter.meanshift.ranger 30 -mode vector
      :   -mode.vector.out meanshift.sqlite -mode.vector.stitch 0

      In vector mode, the memory consumption is stable because the
      segmentation on a per tile basis.

***** Item 3

      In *QGis* we can see the effect of this tile-based segmentation :
      tiles border are visible in the segmentation result. On can also
      see that the segmentation produces a large number of polygons.

***** Item 4

      The following command will run the application in /vector/ mode,
      with the /stitch/ option enabled:

      : $ otbcli_Segmentation -in segmentation_large_xt_phr.tif
      :   -filter meanshift -filter.meanshift.ranger 30 -mode vector
      :   -mode.vector.out meanshift.sqlite -mode.vector.stitch 1

      Looking at the results in *QGis* one can see that most of the
      tiling effects have been removed by the stitching option (there
      might be some left). The results are therefore closer (but not
      identical) to what we would expect without the tiling strategy.

      Here is how the results look like in *QGis*. In blue, one can see
      the results without stitching, and in red, the results with
      stitching.

       #+Latex:\vspace{0.5cm}
      #+Latex:\begin{center}
      #+ATTR_LaTeX: :width 0.9\textwidth
      [[file:Images/qgis_stitch.png]]
      #+Latex:\end{center}
      
**** Homework
***** Item 1
      - The /tilesize/ option allows to tune the size of the tile used
        during piecewise segmentation
      - The /simplify/ option allows to simplify the output polygons up
        to a given tolerance (always expressed in pixels). The
        resulting file will be smaller.
      - The /minsize/ option allows to discard segments whose size is
        smaller than a user-defined threshold (in pixels).

***** Item 2

      To avoid segmenting vegetation, one can build a vegetation mask
      with the *BandMath* application by thresholding the NDVI of the
      image. This mask can then be used in the segmentation application
      using the /mode.vector.inmask/ option. Note that this mode is
      only available in /vector/ mode.

***** Item 3

      Objects with high reflectance values are often more difficult to
      segment. Because of specular reflections, their inner variance is
      usually higher than other objects. Therefore, segmentation
      methods relying on comparison of neighboring pixels with respect
      to a given threshold will fail (this is the case for all three methods we
      used during the exercise).

      An idea to overcome this issue is to segment together all
      neighboring pixels with very high reflectance. This can be done
      with the connected components method, as shown earlier in the
      solution.


